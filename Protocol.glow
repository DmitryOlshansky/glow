# May change 
type Id = Array[u8, 32] # public key - ed25519
type SecretKey = Array[u8, 32] # secret key for Id
type Signature = Array[u8, 64] # signature of Id key
type Addr = Array[u8, 16] # addr, derived from Id

type PubKey = Array[u8, 32] # public key in key exchange
type AeadKey = Array[u8, 32]

type MAC = Array[u8, 16] # for reference the size of AEAD tag
type Nonce = Array[u8, 24] # nonce that identifies each request, nodes use it to dedup requests (has time based + counter based parts)

type KeyExchange = struct {
    id: PubKey
    pk: PubKey
    signature: Signature # signed by cluster secret key
}

type LinkState = struct {
    state: u16
    up: vu
    down: vu
    rev: vu
}

type Ownership = struct {
    master: vu
    slave: vu
}

type Resource = struct {
    type: Id
    id: Id
}

# For any message sender knows it's nonce
# every time there is a need for nonce with signature, 
# that nonce is prepended : signature = Sign(nonce || flatten(args - signature))
interface node {
    # These 2 raw messages shuld be sent by both parties simultaneously
    # raw - without MAC and encryption, keyExchange pairs are persisted for short TTL
    def raw start(kx: KeyExchange): none
    # establish our side of link with this node by providing our key
    def raw establish(kxNonce: Nonce, encryptedKey: AeadKey): none

    # HB is sent over established links periodically with cluster addr as destination
    # First case - if there is any change detected in response (by rev) - flooded to all neibours except this one
    # Second case - if a new addr is discovered - floods to all of new addrs
    # (both could apply)
    def heartbeat(resources: Array[Resource], links: Array[LinkState], ownership: Array[Own]): none

    # label is a human-readable name (must follow a convention and be node-wide unique)
    # signature is done by key for id
    def create(label: Array[u8], type: Id, id: Id, signature: Signature): Id

    # same for reverse operation, needs secret key for that resource Id
    def destroy(id: Id, signature: Signature): void
}

# foreign network interface 
interface fni {

}


