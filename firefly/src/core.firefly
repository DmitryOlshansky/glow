// May change in future
type Id = Array[byte, 16]             // Firefly address, 128 bit unique identifier usually UUID

type Addr = Id

type Nonce = Array[byte, 24]          // nonce that identifies each request, big endian number
                                      // counter in lower bits
                                      // unix epoch millis in 64 upper bits (8 first bytes on the wire)

type LinkClass = struct {
    speed: int                         // int(1 + log10(transfer speed in kb/s)), e.g. 56kbps modem link gets speed class 1
    latency: int                       // int(1 - log10(rtt of packets in seconds))
                                       // links with latency class 0 and below cannot be data-link(s)
                                       // special value: 127 - immediate (shared memory)
    flags: int                         // bits:
                                       // 0 - data link (vs command links that do not route other packets)
                                       // 1 - reliable (true for TCP, RDP, etc.)
                                       // 2 - glow packets are ordered (true in TCP, SCTP)
                                       // 3 - encrypted link
}

// Link State Packet
type LSP = struct {
    from: Id                            // Id of link resource on originator node (in connection-oriented links - client)
    to: Id                              // Id of link resource on destination node (in connection-oriented links - server)
    state: int                          // 0 - down, 1 - up, other values might be added in the future
    mtu: int                            // dynamic value for conservative estimate, means MTU is no less then this value
    class: LinkClass
    rev: int
}

// Relation - a part of establishing Ownership or Uses relation
type Relation = struct {
    kind: int                           // 0 - uses, 1 - owns
    proto: String                       // proto of a slave resource
    master: Id                          // master is a resource who uses or owns slave
    slave: Id                           // slave is a resource used or owner by master
}

// Firefly Network packet
type Packet = struct {
    src: Addr
    dest: Addr
    nonce: Nonce
    method: int                         // number of method of called resource
    type: int                           // 0:message, 1:request, 2:response, 3:error, 4:cancellation request
    offset: int                         // offset for this fragment
    size: int                           // total size of the full packet, to allow early reject by destination node
    payload: Array[byte]                // serialized data
}

// All resources implement this proto, with default implementations for all of methods
// usually provided by the Glow run-time
proto Resource {
    // Human readable form of the resource contents
    def describe(): String
}

// Meta self-description of a protocol with proto interface
proto Proto {
    def extends(): Array[Id]
    def methods(): Array[Method]
}

type Parameter = struct {
    name: String
    type: String
}

type Method = struct {
    name: String
    params: Array[Parameter]
    returnType: String
}

// For any message the sender knows its nonce
proto Node {
    // HB is sent over established links periodically with cluster addr as destination
    // First case - if there is any change detected in state (by rev field) - flooded to all neighbours except this one
    // Second case - if a new node is discovered - floods to the new node
    // (both could apply)
    msg heartbeat(links: Array[LSP], resources: Array[Relation])

    // label is a human-readable name (must follow a convention and be node-wide unique)
    def create(label: String, type: Id): Id

    //
    def ping(data: Array[byte]): Array[byte]
    // 
    def destroy(id: Id): void
}


// A runnable task bound, has implicit use relation to all of the resources of the owner (parent) resource
proto Task {
    def configure(): void
}

// Link has a unique contract
// Owner task gets a separate send/recv raw packet queues
// either via shared memory with the node process or in an platform-specific embedding mode
// Normally each process has exactly one send and one recv packet queue and it's packets are
// processed by the node
proto Link {
    // a packet that will hit the routing framework of the link's parent node (msg is sent by link's task)
    msg outbound(packet: Packet)
    // packet that is to be sent though this link (msg sent by this node)
    msg inbound(packet: Packet)
    // configure link parameters
    def configure(up: int, mtu: int, class: LinkClass): void
}

// Simple key-value store
proto KV {
    // list keys starting at offset and upto size items
    def list(offset: int, size: int): Array[String]
    // get value by key
    def get(key: String): Array[byte]
    // put value by key
    def put(key: String, value: Array[byte]): void
}

// Foreign network interface

proto FNI {
    // protocol argument is one of URI strings for the scheme part
    // For Flows:
    //  udp
    //  rdp
    //  ...
    // For Sequence:
    //  tcp
    //  ws/wss
    //  http/https
    //  file
    //  ...

    // Provides a Sequence that also has FNI Socket configuration capabilities
    def sequence(protocol: Array[byte]): Sequence & Socket

    // Provides a Flow that also has FNI Socket configuration capabilities
    def flow(protocol: Array[byte]): Flow & Socket
}

// FNI socket, in reality it's a connection pool for sequential sockets
proto Socket {
    // binds to a specific f(oreign) n(etwork) a(ddress)
    def bind(fna: String): void

    // connects this pool to the given f(oreign) n(etwork) a(ddress)
    def connect(fna: String): void

    // unlike in BSD's sockets - all connections are automatically and implicitly accepted on the very same object
    // right after listen call
    // connections are identified by sess(ion) parameter values of Sequence proto interface
    def listen(backlog: int): void

    // closes the socket (pool) but keeps associated bind parameters intact
    def close(): void
}

// A base proto for resources which can be (un)subscribed to
// in order to receive msg's from them
proto Publisher {
    def subscribe(id: Id): void
    def unsubscribe(id: Id): void
}

// In order sequence of messages, think TCP or (more properly so) SCTP and QUIC
proto Sequence : Publisher {
    // seqNum == 0 -> new stream of data, start of a new sequential stream
    // seqNo wraps around after 2^48 - 1 but to one, not to zero(!)
    // seqNo 2^^48 is written as 1 and sequential process is continued as 2, 3, ...
    def write(stream: int, seqNo: int, data: Array[u8]): void

    // if abrupt != 0 -> terminate forcibly (e.g. cancel transaction)
    def end(stream: int, abrupt: int)
}

// Out of order flow of messages, think UDP and media streaming protocols
proto Flow : Publisher {
    // dest is usually a foreign (sub-)address, use 0-length if not applicable
    msg write(dest: Array[byte], datagram: Array[byte])
}
